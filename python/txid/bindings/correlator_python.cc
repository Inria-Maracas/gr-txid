/*
 * Copyright 2023 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(1)                                                        */
/* BINDTOOL_HEADER_FILE(correlator.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(e64b071af3f42bdaa866b4df1ec9fb3f)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/txid/correlator.h>
// pydoc.h is automatically generated in the build directory
#include <correlator_pydoc.h>

void bind_correlator(py::module& m)
{

    using correlator    = gr::txid::correlator;

    py::enum_<gr::txid::tm_type>(m, "tm_type")
            .value("THRESHOLD_DYNAMIC", gr::txid::THRESHOLD_DYNAMIC)   // 0
            .value("THRESHOLD_ABSOLUTE", gr::txid::THRESHOLD_ABSOLUTE) // 1
            .export_values();

    py::implicitly_convertible<int, gr::txid::tm_type>();

    py::class_<correlator, gr::sync_block, gr::block, gr::basic_block,
        std::shared_ptr<correlator>>(m, "correlator", D(correlator))

        .def(py::init(&correlator::make),
           py::arg("symbols"),
           py::arg("sps"),
           py::arg("mark_delay"),
           py::arg("threshold") =  0.9,
           py::arg("threshold_method") =  ::gr::txid::tm_type::THRESHOLD_ABSOLUTE,
           D(correlator, make)
        )
        
        // .def("symbols", &correlator::symbols, D(correlator, symbols))


        .def("set_symbols",
             &correlator::set_symbols,
             py::arg("symbols"),
             D(correlator, set_symbols))


        .def("mark_delay", &correlator::mark_delay, D(correlator, mark_delay))


        .def("set_mark_delay",
             &correlator::set_mark_delay,
             py::arg("mark_delay"),
             D(correlator, set_mark_delay))


        .def("threshold", &correlator::threshold, D(correlator, threshold))


        .def("set_threshold",
             &correlator::set_threshold,
             py::arg("threshold"),
             D(correlator, set_threshold));


        ;




}








